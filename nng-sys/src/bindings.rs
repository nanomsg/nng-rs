/* automatically generated by rust-bindgen 0.72.1 */

pub const NNG_MAJOR_VERSION: u32 = 1;
pub const NNG_MINOR_VERSION: u32 = 11;
pub const NNG_PATCH_VERSION: u32 = 0;
pub const NNG_RELEASE_SUFFIX: &[u8; 1] = b"\0";
pub const NNG_MAXADDRLEN: u32 = 128;
pub const NNG_DURATION_INFINITE: i32 = -1;
pub const NNG_DURATION_DEFAULT: i32 = -2;
pub const NNG_DURATION_ZERO: u32 = 0;
pub const NNG_MAXADDRSTRLEN: u32 = 144;
pub const NNG_FLAG_ALLOC: u32 = 1;
pub const NNG_FLAG_NONBLOCK: u32 = 2;
pub const NNG_OPT_SOCKNAME: &[u8; 12] = b"socket-name\0";
pub const NNG_OPT_RAW: &[u8; 4] = b"raw\0";
pub const NNG_OPT_PROTO: &[u8; 9] = b"protocol\0";
pub const NNG_OPT_PROTONAME: &[u8; 14] = b"protocol-name\0";
pub const NNG_OPT_PEER: &[u8; 5] = b"peer\0";
pub const NNG_OPT_PEERNAME: &[u8; 10] = b"peer-name\0";
pub const NNG_OPT_RECVBUF: &[u8; 12] = b"recv-buffer\0";
pub const NNG_OPT_SENDBUF: &[u8; 12] = b"send-buffer\0";
pub const NNG_OPT_RECVFD: &[u8; 8] = b"recv-fd\0";
pub const NNG_OPT_SENDFD: &[u8; 8] = b"send-fd\0";
pub const NNG_OPT_RECVTIMEO: &[u8; 13] = b"recv-timeout\0";
pub const NNG_OPT_SENDTIMEO: &[u8; 13] = b"send-timeout\0";
pub const NNG_OPT_LOCADDR: &[u8; 14] = b"local-address\0";
pub const NNG_OPT_REMADDR: &[u8; 15] = b"remote-address\0";
pub const NNG_OPT_URL: &[u8; 4] = b"url\0";
pub const NNG_OPT_MAXTTL: &[u8; 8] = b"ttl-max\0";
pub const NNG_OPT_RECVMAXSZ: &[u8; 14] = b"recv-size-max\0";
pub const NNG_OPT_RECONNMINT: &[u8; 19] = b"reconnect-time-min\0";
pub const NNG_OPT_RECONNMAXT: &[u8; 19] = b"reconnect-time-max\0";
pub const NNG_OPT_TLS_CONFIG: &[u8; 11] = b"tls-config\0";
pub const NNG_OPT_TLS_AUTH_MODE: &[u8; 13] = b"tls-authmode\0";
pub const NNG_OPT_TLS_CERT_KEY_FILE: &[u8; 18] = b"tls-cert-key-file\0";
pub const NNG_OPT_TLS_CA_FILE: &[u8; 12] = b"tls-ca-file\0";
pub const NNG_OPT_TLS_SERVER_NAME: &[u8; 16] = b"tls-server-name\0";
pub const NNG_OPT_TLS_VERIFIED: &[u8; 13] = b"tls-verified\0";
pub const NNG_OPT_TLS_PEER_CN: &[u8; 12] = b"tls-peer-cn\0";
pub const NNG_OPT_TLS_PEER_ALT_NAMES: &[u8; 19] = b"tls-peer-alt-names\0";
pub const NNG_OPT_TCP_NODELAY: &[u8; 12] = b"tcp-nodelay\0";
pub const NNG_OPT_TCP_KEEPALIVE: &[u8; 14] = b"tcp-keepalive\0";
pub const NNG_OPT_TCP_BOUND_PORT: &[u8; 15] = b"tcp-bound-port\0";
pub const NNG_OPT_IPC_SECURITY_DESCRIPTOR: &[u8; 24] = b"ipc:security-descriptor\0";
pub const NNG_OPT_IPC_PERMISSIONS: &[u8; 16] = b"ipc:permissions\0";
pub const NNG_OPT_PEER_UID: &[u8; 13] = b"ipc:peer-uid\0";
pub const NNG_OPT_IPC_PEER_UID: &[u8; 13] = b"ipc:peer-uid\0";
pub const NNG_OPT_PEER_GID: &[u8; 13] = b"ipc:peer-gid\0";
pub const NNG_OPT_IPC_PEER_GID: &[u8; 13] = b"ipc:peer-gid\0";
pub const NNG_OPT_PEER_PID: &[u8; 13] = b"ipc:peer-pid\0";
pub const NNG_OPT_IPC_PEER_PID: &[u8; 13] = b"ipc:peer-pid\0";
pub const NNG_OPT_PEER_ZONEID: &[u8; 16] = b"ipc:peer-zoneid\0";
pub const NNG_OPT_IPC_PEER_ZONEID: &[u8; 16] = b"ipc:peer-zoneid\0";
pub const NNG_OPT_WS_REQUEST_HEADERS: &[u8; 19] = b"ws:request-headers\0";
pub const NNG_OPT_WS_RESPONSE_HEADERS: &[u8; 20] = b"ws:response-headers\0";
pub const NNG_OPT_WS_RESPONSE_HEADER: &[u8; 20] = b"ws:response-header:\0";
pub const NNG_OPT_WS_REQUEST_HEADER: &[u8; 19] = b"ws:request-header:\0";
pub const NNG_OPT_WS_REQUEST_URI: &[u8; 15] = b"ws:request-uri\0";
pub const NNG_OPT_WS_SENDMAXFRAME: &[u8; 15] = b"ws:txframe-max\0";
pub const NNG_OPT_WS_RECVMAXFRAME: &[u8; 15] = b"ws:rxframe-max\0";
pub const NNG_OPT_WS_PROTOCOL: &[u8; 12] = b"ws:protocol\0";
pub const NNG_OPT_WS_SEND_TEXT: &[u8; 13] = b"ws:send-text\0";
pub const NNG_OPT_WS_RECV_TEXT: &[u8; 13] = b"ws:recv-text\0";
pub const NNG_OPT_SOCKET_FD: &[u8; 10] = b"socket:fd\0";
pub const NNG_BUS0_SELF: u32 = 112;
pub const NNG_BUS0_PEER: u32 = 112;
pub const NNG_BUS0_SELF_NAME: &[u8; 4] = b"bus\0";
pub const NNG_BUS0_PEER_NAME: &[u8; 4] = b"bus\0";
pub const NNG_OPT_PAIR1_POLY: &[u8; 18] = b"pair1:polyamorous\0";
pub const NNG_PAIR1_SELF: u32 = 17;
pub const NNG_PAIR1_PEER: u32 = 17;
pub const NNG_PAIR1_SELF_NAME: &[u8; 6] = b"pair1\0";
pub const NNG_PAIR1_PEER_NAME: &[u8; 6] = b"pair1\0";
pub const NNG_OPT_SUB_SUBSCRIBE: &[u8; 14] = b"sub:subscribe\0";
pub const NNG_OPT_SUB_UNSUBSCRIBE: &[u8; 16] = b"sub:unsubscribe\0";
pub const NNG_OPT_SUB_PREFNEW: &[u8; 12] = b"sub:prefnew\0";
pub const NNG_REP0_SELF: u32 = 49;
pub const NNG_REP0_PEER: u32 = 48;
pub const NNG_REP0_SELF_NAME: &[u8; 4] = b"rep\0";
pub const NNG_REP0_PEER_NAME: &[u8; 4] = b"req\0";
pub const NNG_REQ0_SELF: u32 = 48;
pub const NNG_REQ0_PEER: u32 = 49;
pub const NNG_REQ0_SELF_NAME: &[u8; 4] = b"req\0";
pub const NNG_REQ0_PEER_NAME: &[u8; 4] = b"rep\0";
pub const NNG_OPT_REQ_RESENDTIME: &[u8; 16] = b"req:resend-time\0";
pub const NNG_OPT_REQ_RESENDTICK: &[u8; 16] = b"req:resend-tick\0";
pub const NNG_RESPONDENT0_SELF: u32 = 99;
pub const NNG_RESPONDENT0_PEER: u32 = 98;
pub const NNG_RESPONDENT0_SELF_NAME: &[u8; 11] = b"respondent\0";
pub const NNG_RESPONDENT0_PEER_NAME: &[u8; 9] = b"surveyor\0";
pub const NNG_SURVEYOR0_SELF: u32 = 98;
pub const NNG_SURVEYOR0_PEER: u32 = 99;
pub const NNG_SURVEYOR0_SELF_NAME: &[u8; 9] = b"surveyor\0";
pub const NNG_SURVEYOR0_PEER_NAME: &[u8; 11] = b"respondent\0";
pub const NNG_OPT_SURVEYOR_SURVEYTIME: &[u8; 21] = b"surveyor:survey-time\0";
pub const NNG_OPT_WSS_REQUEST_HEADERS: &[u8; 19] = b"ws:request-headers\0";
pub const NNG_OPT_WSS_RESPONSE_HEADERS: &[u8; 20] = b"ws:response-headers\0";
pub const NNG_OPT_ZT_HOME: &[u8; 8] = b"zt:home\0";
pub const NNG_OPT_ZT_NWID: &[u8; 8] = b"zt:nwid\0";
pub const NNG_OPT_ZT_NODE: &[u8; 8] = b"zt:node\0";
pub const NNG_OPT_ZT_NETWORK_STATUS: &[u8; 18] = b"zt:network-status\0";
pub const NNG_OPT_ZT_NETWORK_NAME: &[u8; 16] = b"zt:network-name\0";
pub const NNG_OPT_ZT_PING_TIME: &[u8; 13] = b"zt:ping-time\0";
pub const NNG_OPT_ZT_PING_TRIES: &[u8; 14] = b"zt:ping-tries\0";
pub const NNG_OPT_ZT_CONN_TIME: &[u8; 13] = b"zt:conn-time\0";
pub const NNG_OPT_ZT_CONN_TRIES: &[u8; 14] = b"zt:conn-tries\0";
pub const NNG_OPT_ZT_MTU: &[u8; 7] = b"zt:mtu\0";
pub const NNG_OPT_ZT_ORBIT: &[u8; 9] = b"zt:orbit\0";
pub const NNG_OPT_ZT_DEORBIT: &[u8; 11] = b"zt:deorbit\0";
pub const NNG_OPT_ZT_ADD_LOCAL_ADDR: &[u8; 18] = b"zt:add-local-addr\0";
pub const NNG_OPT_ZT_CLEAR_LOCAL_ADDRS: &[u8; 21] = b"zt:clear-local-addrs\0";
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct nng_ctx_s {
    pub _bindgen_opaque_blob: u32,
}
pub type nng_ctx = nng_ctx_s;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct nng_dialer_s {
    pub _bindgen_opaque_blob: u32,
}
pub type nng_dialer = nng_dialer_s;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct nng_listener_s {
    pub _bindgen_opaque_blob: u32,
}
pub type nng_listener = nng_listener_s;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct nng_pipe_s {
    pub _bindgen_opaque_blob: u32,
}
pub type nng_pipe = nng_pipe_s;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct nng_socket_s {
    pub _bindgen_opaque_blob: u32,
}
pub type nng_socket = nng_socket_s;
pub type nng_duration = i32;
pub type nng_time = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_msg {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_stat {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_aio {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_sockaddr_inproc {
    pub sa_family: u16,
    pub sa_name: [::core::ffi::c_char; 128usize],
}
impl Default for nng_sockaddr_inproc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_sockaddr_path {
    pub sa_family: u16,
    pub sa_path: [::core::ffi::c_char; 128usize],
}
impl Default for nng_sockaddr_path {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nng_sockaddr_in6 {
    pub sa_family: u16,
    pub sa_port: u16,
    pub sa_addr: [u8; 16usize],
    pub sa_scope: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nng_sockaddr_in {
    pub sa_family: u16,
    pub sa_port: u16,
    pub sa_addr: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nng_sockaddr_zt {
    pub sa_family: u16,
    pub sa_nwid: u64,
    pub sa_nodeid: u64,
    pub sa_port: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_sockaddr_abstract {
    pub sa_family: u16,
    pub sa_len: u16,
    pub sa_name: [u8; 107usize],
}
impl Default for nng_sockaddr_abstract {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct nng_sockaddr_storage {
    pub sa_family: u16,
    pub sa_pad: [u64; 16usize],
}
pub type nng_sockaddr_ipc = nng_sockaddr_path;
#[repr(C)]
#[derive(Copy, Clone)]
pub union nng_sockaddr {
    pub s_family: u16,
    pub s_ipc: nng_sockaddr_ipc,
    pub s_inproc: nng_sockaddr_inproc,
    pub s_in6: nng_sockaddr_in6,
    pub s_in: nng_sockaddr_in,
    pub s_zt: nng_sockaddr_zt,
    pub s_abstract: nng_sockaddr_abstract,
    pub s_storage: nng_sockaddr_storage,
}
impl Default for nng_sockaddr {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum nng_sockaddr_family {
    NNG_AF_UNSPEC = 0,
    NNG_AF_INPROC = 1,
    NNG_AF_IPC = 2,
    NNG_AF_INET = 3,
    NNG_AF_INET6 = 4,
    NNG_AF_ZT = 5,
    NNG_AF_ABSTRACT = 6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_iov {
    pub iov_buf: *mut ::core::ffi::c_void,
    pub iov_len: usize,
}
impl Default for nng_iov {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn nng_fini();
}
unsafe extern "C" {
    pub fn nng_close(arg1: nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_close(arg1: nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_id(arg1: nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_set(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_void,
        arg4: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_set_bool(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_set_int(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_set_size(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_set_uint64(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_set_string(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_set_ptr(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_set_ms(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_set_addr(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *const nng_sockaddr,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_get(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
        arg4: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_get_bool(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_get_int(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_get_size(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_get_uint64(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_get_string(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_get_ptr(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_get_ms(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_get_addr(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_sockaddr,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_proto_id(id: nng_socket, arg1: *mut u16) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_peer_id(id: nng_socket, arg1: *mut u16) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_proto_name(
        id: nng_socket,
        arg1: *mut *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_peer_name(
        id: nng_socket,
        arg1: *mut *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_socket_raw(arg1: nng_socket, arg2: *mut bool) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_str_sockaddr(
        sa: *const nng_sockaddr,
        buf: *mut ::core::ffi::c_char,
        bufsz: usize,
    ) -> *const ::core::ffi::c_char;
}
pub const NNG_PIPE_EV_ADD_PRE: nng_pipe_ev = 0;
pub const NNG_PIPE_EV_ADD_POST: nng_pipe_ev = 1;
pub const NNG_PIPE_EV_REM_POST: nng_pipe_ev = 2;
pub type nng_pipe_ev = ::core::ffi::c_uint;
pub type nng_pipe_cb = ::core::option::Option<
    unsafe extern "C" fn(arg1: nng_pipe, arg2: nng_pipe_ev, arg3: *mut ::core::ffi::c_void),
>;
unsafe extern "C" {
    pub fn nng_pipe_notify(
        arg1: nng_socket,
        arg2: nng_pipe_ev,
        arg3: nng_pipe_cb,
        arg4: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listen(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_listener,
        arg4: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dial(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_dialer,
        arg4: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_create(
        arg1: *mut nng_dialer,
        arg2: nng_socket,
        arg3: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_create(
        arg1: *mut nng_listener,
        arg2: nng_socket,
        arg3: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_start(arg1: nng_dialer, arg2: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_start(arg1: nng_listener, arg2: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_close(arg1: nng_dialer) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_close(arg1: nng_listener) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_id(arg1: nng_dialer) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_id(arg1: nng_listener) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_set(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_void,
        arg4: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_set_bool(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_set_int(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_set_size(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_set_uint64(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_set_string(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_set_ptr(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_set_ms(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_set_addr(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *const nng_sockaddr,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_get(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
        arg4: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_get_bool(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_get_int(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_get_size(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_get_uint64(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_get_string(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_get_ptr(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_get_ms(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_get_addr(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_sockaddr,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_set(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_void,
        arg4: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_set_bool(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_set_int(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_set_size(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_set_uint64(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_set_string(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_set_ptr(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_set_ms(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_set_addr(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *const nng_sockaddr,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_get(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
        arg4: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_get_bool(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_get_int(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_get_size(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_get_uint64(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_get_string(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_get_ptr(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_get_ms(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_get_addr(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_sockaddr,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_strerror(arg1: ::core::ffi::c_int) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn nng_send(
        arg1: nng_socket,
        arg2: *mut ::core::ffi::c_void,
        arg3: usize,
        arg4: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_recv(
        arg1: nng_socket,
        arg2: *mut ::core::ffi::c_void,
        arg3: *mut usize,
        arg4: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_sendmsg(
        arg1: nng_socket,
        arg2: *mut nng_msg,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_recvmsg(
        arg1: nng_socket,
        arg2: *mut *mut nng_msg,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_sock_send(arg1: nng_socket, arg2: *mut nng_aio);
}
unsafe extern "C" {
    pub fn nng_send_aio(arg1: nng_socket, arg2: *mut nng_aio);
}
unsafe extern "C" {
    pub fn nng_sock_recv(arg1: nng_socket, arg2: *mut nng_aio);
}
unsafe extern "C" {
    pub fn nng_recv_aio(arg1: nng_socket, arg2: *mut nng_aio);
}
unsafe extern "C" {
    pub fn nng_ctx_open(arg1: *mut nng_ctx, arg2: nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_close(arg1: nng_ctx) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_id(arg1: nng_ctx) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_recv(arg1: nng_ctx, arg2: *mut nng_aio);
}
unsafe extern "C" {
    pub fn nng_ctx_recvmsg(
        arg1: nng_ctx,
        arg2: *mut *mut nng_msg,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_send(arg1: nng_ctx, arg2: *mut nng_aio);
}
unsafe extern "C" {
    pub fn nng_ctx_sendmsg(
        arg1: nng_ctx,
        arg2: *mut nng_msg,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_get(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
        arg4: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_get_bool(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_get_int(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_get_size(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_get_uint64(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_get_string(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_get_ptr(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_get_ms(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_set(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_void,
        arg4: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_set_bool(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_set_int(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_set_size(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_set_uint64(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_set_string(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_set_ptr(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_set_ms(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_alloc(arg1: usize) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn nng_free(arg1: *mut ::core::ffi::c_void, arg2: usize);
}
unsafe extern "C" {
    pub fn nng_strdup(arg1: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn nng_strfree(arg1: *mut ::core::ffi::c_char);
}
unsafe extern "C" {
    pub fn nng_aio_alloc(
        arg1: *mut *mut nng_aio,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
        arg3: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_aio_free(arg1: *mut nng_aio);
}
unsafe extern "C" {
    pub fn nng_aio_reap(arg1: *mut nng_aio);
}
unsafe extern "C" {
    pub fn nng_aio_stop(arg1: *mut nng_aio);
}
unsafe extern "C" {
    pub fn nng_aio_result(arg1: *mut nng_aio) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_aio_count(arg1: *mut nng_aio) -> usize;
}
unsafe extern "C" {
    pub fn nng_aio_cancel(arg1: *mut nng_aio);
}
unsafe extern "C" {
    pub fn nng_aio_abort(arg1: *mut nng_aio, arg2: ::core::ffi::c_int);
}
unsafe extern "C" {
    pub fn nng_aio_wait(arg1: *mut nng_aio);
}
unsafe extern "C" {
    pub fn nng_aio_busy(arg1: *mut nng_aio) -> bool;
}
unsafe extern "C" {
    pub fn nng_aio_set_msg(arg1: *mut nng_aio, arg2: *mut nng_msg);
}
unsafe extern "C" {
    pub fn nng_aio_get_msg(arg1: *mut nng_aio) -> *mut nng_msg;
}
unsafe extern "C" {
    pub fn nng_aio_set_input(
        arg1: *mut nng_aio,
        arg2: ::core::ffi::c_uint,
        arg3: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_aio_get_input(
        arg1: *mut nng_aio,
        arg2: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn nng_aio_set_output(
        arg1: *mut nng_aio,
        arg2: ::core::ffi::c_uint,
        arg3: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_aio_get_output(
        arg1: *mut nng_aio,
        arg2: ::core::ffi::c_uint,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn nng_aio_set_timeout(arg1: *mut nng_aio, arg2: nng_duration);
}
unsafe extern "C" {
    pub fn nng_aio_set_expire(arg1: *mut nng_aio, arg2: nng_time);
}
unsafe extern "C" {
    pub fn nng_aio_set_iov(
        arg1: *mut nng_aio,
        arg2: ::core::ffi::c_uint,
        arg3: *const nng_iov,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_aio_begin(arg1: *mut nng_aio) -> bool;
}
unsafe extern "C" {
    pub fn nng_aio_finish(arg1: *mut nng_aio, arg2: ::core::ffi::c_int);
}
pub type nng_aio_cancelfn = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut nng_aio,
        arg2: *mut ::core::ffi::c_void,
        arg3: ::core::ffi::c_int,
    ),
>;
unsafe extern "C" {
    pub fn nng_aio_defer(
        arg1: *mut nng_aio,
        arg2: nng_aio_cancelfn,
        arg3: *mut ::core::ffi::c_void,
    );
}
unsafe extern "C" {
    pub fn nng_sleep_aio(arg1: nng_duration, arg2: *mut nng_aio);
}
unsafe extern "C" {
    pub fn nng_msg_alloc(arg1: *mut *mut nng_msg, arg2: usize) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_free(arg1: *mut nng_msg);
}
unsafe extern "C" {
    pub fn nng_msg_realloc(arg1: *mut nng_msg, arg2: usize) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_reserve(arg1: *mut nng_msg, arg2: usize) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_capacity(arg1: *mut nng_msg) -> usize;
}
unsafe extern "C" {
    pub fn nng_msg_header(arg1: *mut nng_msg) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn nng_msg_header_len(arg1: *const nng_msg) -> usize;
}
unsafe extern "C" {
    pub fn nng_msg_body(arg1: *mut nng_msg) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn nng_msg_len(arg1: *const nng_msg) -> usize;
}
unsafe extern "C" {
    pub fn nng_msg_append(
        arg1: *mut nng_msg,
        arg2: *const ::core::ffi::c_void,
        arg3: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_insert(
        arg1: *mut nng_msg,
        arg2: *const ::core::ffi::c_void,
        arg3: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_trim(arg1: *mut nng_msg, arg2: usize) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_chop(arg1: *mut nng_msg, arg2: usize) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_header_append(
        arg1: *mut nng_msg,
        arg2: *const ::core::ffi::c_void,
        arg3: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_header_insert(
        arg1: *mut nng_msg,
        arg2: *const ::core::ffi::c_void,
        arg3: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_header_trim(arg1: *mut nng_msg, arg2: usize) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_header_chop(arg1: *mut nng_msg, arg2: usize) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_header_append_u16(arg1: *mut nng_msg, arg2: u16) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_header_append_u32(arg1: *mut nng_msg, arg2: u32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_header_append_u64(arg1: *mut nng_msg, arg2: u64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_header_insert_u16(arg1: *mut nng_msg, arg2: u16) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_header_insert_u32(arg1: *mut nng_msg, arg2: u32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_header_insert_u64(arg1: *mut nng_msg, arg2: u64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_header_chop_u16(arg1: *mut nng_msg, arg2: *mut u16) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_header_chop_u32(arg1: *mut nng_msg, arg2: *mut u32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_header_chop_u64(arg1: *mut nng_msg, arg2: *mut u64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_header_trim_u16(arg1: *mut nng_msg, arg2: *mut u16) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_header_trim_u32(arg1: *mut nng_msg, arg2: *mut u32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_header_trim_u64(arg1: *mut nng_msg, arg2: *mut u64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_append_u16(arg1: *mut nng_msg, arg2: u16) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_append_u32(arg1: *mut nng_msg, arg2: u32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_append_u64(arg1: *mut nng_msg, arg2: u64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_insert_u16(arg1: *mut nng_msg, arg2: u16) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_insert_u32(arg1: *mut nng_msg, arg2: u32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_insert_u64(arg1: *mut nng_msg, arg2: u64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_chop_u16(arg1: *mut nng_msg, arg2: *mut u16) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_chop_u32(arg1: *mut nng_msg, arg2: *mut u32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_chop_u64(arg1: *mut nng_msg, arg2: *mut u64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_trim_u16(arg1: *mut nng_msg, arg2: *mut u16) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_trim_u32(arg1: *mut nng_msg, arg2: *mut u32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_trim_u64(arg1: *mut nng_msg, arg2: *mut u64) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_dup(arg1: *mut *mut nng_msg, arg2: *const nng_msg) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_clear(arg1: *mut nng_msg);
}
unsafe extern "C" {
    pub fn nng_msg_header_clear(arg1: *mut nng_msg);
}
unsafe extern "C" {
    pub fn nng_msg_set_pipe(arg1: *mut nng_msg, arg2: nng_pipe);
}
unsafe extern "C" {
    pub fn nng_msg_get_pipe(arg1: *const nng_msg) -> nng_pipe;
}
unsafe extern "C" {
    pub fn nng_pipe_get(
        arg1: nng_pipe,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
        arg4: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pipe_get_bool(
        arg1: nng_pipe,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pipe_get_int(
        arg1: nng_pipe,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pipe_get_ms(
        arg1: nng_pipe,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pipe_get_size(
        arg1: nng_pipe,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pipe_get_uint64(
        arg1: nng_pipe,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pipe_get_string(
        arg1: nng_pipe,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pipe_get_ptr(
        arg1: nng_pipe,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pipe_get_addr(
        arg1: nng_pipe,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_sockaddr,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pipe_close(arg1: nng_pipe) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pipe_id(arg1: nng_pipe) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pipe_socket(arg1: nng_pipe) -> nng_socket;
}
unsafe extern "C" {
    pub fn nng_pipe_dialer(arg1: nng_pipe) -> nng_dialer;
}
unsafe extern "C" {
    pub fn nng_pipe_listener(arg1: nng_pipe) -> nng_listener;
}
unsafe extern "C" {
    pub fn nng_stats_get(arg1: *mut *mut nng_stat) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stats_free(arg1: *mut nng_stat);
}
unsafe extern "C" {
    pub fn nng_stats_dump(arg1: *mut nng_stat);
}
unsafe extern "C" {
    pub fn nng_stat_next(arg1: *mut nng_stat) -> *mut nng_stat;
}
unsafe extern "C" {
    pub fn nng_stat_child(arg1: *mut nng_stat) -> *mut nng_stat;
}
unsafe extern "C" {
    pub fn nng_stat_name(arg1: *mut nng_stat) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn nng_stat_type(arg1: *mut nng_stat) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stat_find(arg1: *mut nng_stat, arg2: *const ::core::ffi::c_char) -> *mut nng_stat;
}
unsafe extern "C" {
    pub fn nng_stat_find_socket(arg1: *mut nng_stat, arg2: nng_socket) -> *mut nng_stat;
}
unsafe extern "C" {
    pub fn nng_stat_find_dialer(arg1: *mut nng_stat, arg2: nng_dialer) -> *mut nng_stat;
}
unsafe extern "C" {
    pub fn nng_stat_find_listener(arg1: *mut nng_stat, arg2: nng_listener) -> *mut nng_stat;
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum nng_stat_type_enum {
    NNG_STAT_SCOPE = 0,
    NNG_STAT_LEVEL = 1,
    NNG_STAT_COUNTER = 2,
    NNG_STAT_STRING = 3,
    NNG_STAT_BOOLEAN = 4,
    NNG_STAT_ID = 5,
}
unsafe extern "C" {
    pub fn nng_stat_unit(arg1: *mut nng_stat) -> ::core::ffi::c_int;
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum nng_unit_enum {
    NNG_UNIT_NONE = 0,
    NNG_UNIT_BYTES = 1,
    NNG_UNIT_MESSAGES = 2,
    NNG_UNIT_MILLIS = 3,
    NNG_UNIT_EVENTS = 4,
}
unsafe extern "C" {
    pub fn nng_stat_value(arg1: *mut nng_stat) -> u64;
}
unsafe extern "C" {
    pub fn nng_stat_bool(arg1: *mut nng_stat) -> bool;
}
unsafe extern "C" {
    pub fn nng_stat_string(arg1: *mut nng_stat) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn nng_stat_desc(arg1: *mut nng_stat) -> *const ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn nng_stat_timestamp(arg1: *mut nng_stat) -> u64;
}
unsafe extern "C" {
    pub fn nng_device(arg1: nng_socket, arg2: nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_device_aio(arg1: *mut nng_aio, arg2: nng_socket, arg3: nng_socket);
}
pub const NNG_EINTR: nng_errno_enum = 1;
pub const NNG_ENOMEM: nng_errno_enum = 2;
pub const NNG_EINVAL: nng_errno_enum = 3;
pub const NNG_EBUSY: nng_errno_enum = 4;
pub const NNG_ETIMEDOUT: nng_errno_enum = 5;
pub const NNG_ECONNREFUSED: nng_errno_enum = 6;
pub const NNG_ECLOSED: nng_errno_enum = 7;
pub const NNG_EAGAIN: nng_errno_enum = 8;
pub const NNG_ENOTSUP: nng_errno_enum = 9;
pub const NNG_EADDRINUSE: nng_errno_enum = 10;
pub const NNG_ESTATE: nng_errno_enum = 11;
pub const NNG_ENOENT: nng_errno_enum = 12;
pub const NNG_EPROTO: nng_errno_enum = 13;
pub const NNG_EUNREACHABLE: nng_errno_enum = 14;
pub const NNG_EADDRINVAL: nng_errno_enum = 15;
pub const NNG_EPERM: nng_errno_enum = 16;
pub const NNG_EMSGSIZE: nng_errno_enum = 17;
pub const NNG_ECONNABORTED: nng_errno_enum = 18;
pub const NNG_ECONNRESET: nng_errno_enum = 19;
pub const NNG_ECANCELED: nng_errno_enum = 20;
pub const NNG_ENOFILES: nng_errno_enum = 21;
pub const NNG_ENOSPC: nng_errno_enum = 22;
pub const NNG_EEXIST: nng_errno_enum = 23;
pub const NNG_EREADONLY: nng_errno_enum = 24;
pub const NNG_EWRITEONLY: nng_errno_enum = 25;
pub const NNG_ECRYPTO: nng_errno_enum = 26;
pub const NNG_EPEERAUTH: nng_errno_enum = 27;
pub const NNG_ENOARG: nng_errno_enum = 28;
pub const NNG_EAMBIGUOUS: nng_errno_enum = 29;
pub const NNG_EBADTYPE: nng_errno_enum = 30;
pub const NNG_ECONNSHUT: nng_errno_enum = 31;
pub const NNG_EINTERNAL: nng_errno_enum = 1000;
pub const NNG_ESYSERR: nng_errno_enum = 268435456;
pub const NNG_ETRANERR: nng_errno_enum = 536870912;
pub type nng_errno_enum = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_url {
    pub u_rawurl: *mut ::core::ffi::c_char,
    pub u_scheme: *mut ::core::ffi::c_char,
    pub u_userinfo: *mut ::core::ffi::c_char,
    pub u_host: *mut ::core::ffi::c_char,
    pub u_hostname: *mut ::core::ffi::c_char,
    pub u_port: *mut ::core::ffi::c_char,
    pub u_path: *mut ::core::ffi::c_char,
    pub u_query: *mut ::core::ffi::c_char,
    pub u_fragment: *mut ::core::ffi::c_char,
    pub u_requri: *mut ::core::ffi::c_char,
}
impl Default for nng_url {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn nng_url_parse(
        arg1: *mut *mut nng_url,
        arg2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_url_free(arg1: *mut nng_url);
}
unsafe extern "C" {
    pub fn nng_url_clone(arg1: *mut *mut nng_url, arg2: *const nng_url) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_version() -> *const ::core::ffi::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_stream {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_stream_dialer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_stream_listener {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn nng_stream_free(arg1: *mut nng_stream);
}
unsafe extern "C" {
    pub fn nng_stream_close(arg1: *mut nng_stream);
}
unsafe extern "C" {
    pub fn nng_stream_send(arg1: *mut nng_stream, arg2: *mut nng_aio);
}
unsafe extern "C" {
    pub fn nng_stream_recv(arg1: *mut nng_stream, arg2: *mut nng_aio);
}
unsafe extern "C" {
    pub fn nng_stream_get(
        arg1: *mut nng_stream,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
        arg4: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_get_bool(
        arg1: *mut nng_stream,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_get_int(
        arg1: *mut nng_stream,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_get_ms(
        arg1: *mut nng_stream,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_get_size(
        arg1: *mut nng_stream,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_get_uint64(
        arg1: *mut nng_stream,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_get_string(
        arg1: *mut nng_stream,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_get_ptr(
        arg1: *mut nng_stream,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_get_addr(
        arg1: *mut nng_stream,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_sockaddr,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_set(
        arg1: *mut nng_stream,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_void,
        arg4: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_set_bool(
        arg1: *mut nng_stream,
        arg2: *const ::core::ffi::c_char,
        arg3: bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_set_int(
        arg1: *mut nng_stream,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_set_ms(
        arg1: *mut nng_stream,
        arg2: *const ::core::ffi::c_char,
        arg3: nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_set_size(
        arg1: *mut nng_stream,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_set_uint64(
        arg1: *mut nng_stream,
        arg2: *const ::core::ffi::c_char,
        arg3: u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_set_string(
        arg1: *mut nng_stream,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_set_ptr(
        arg1: *mut nng_stream,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_dialer_alloc(
        arg1: *mut *mut nng_stream_dialer,
        arg2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_dialer_alloc_url(
        arg1: *mut *mut nng_stream_dialer,
        arg2: *const nng_url,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_dialer_free(arg1: *mut nng_stream_dialer);
}
unsafe extern "C" {
    pub fn nng_stream_dialer_close(arg1: *mut nng_stream_dialer);
}
unsafe extern "C" {
    pub fn nng_stream_dialer_dial(arg1: *mut nng_stream_dialer, arg2: *mut nng_aio);
}
unsafe extern "C" {
    pub fn nng_stream_dialer_set(
        arg1: *mut nng_stream_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_void,
        arg4: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_dialer_get(
        arg1: *mut nng_stream_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
        arg4: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_dialer_get_bool(
        arg1: *mut nng_stream_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_dialer_get_int(
        arg1: *mut nng_stream_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_dialer_get_ms(
        arg1: *mut nng_stream_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_dialer_get_size(
        arg1: *mut nng_stream_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_dialer_get_uint64(
        arg1: *mut nng_stream_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_dialer_get_string(
        arg1: *mut nng_stream_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_dialer_get_ptr(
        arg1: *mut nng_stream_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_dialer_get_addr(
        arg1: *mut nng_stream_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_sockaddr,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_dialer_set_bool(
        arg1: *mut nng_stream_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_dialer_set_int(
        arg1: *mut nng_stream_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_dialer_set_ms(
        arg1: *mut nng_stream_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_dialer_set_size(
        arg1: *mut nng_stream_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_dialer_set_uint64(
        arg1: *mut nng_stream_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_dialer_set_string(
        arg1: *mut nng_stream_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_dialer_set_ptr(
        arg1: *mut nng_stream_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_dialer_set_addr(
        arg1: *mut nng_stream_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *const nng_sockaddr,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_listener_alloc(
        arg1: *mut *mut nng_stream_listener,
        arg2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_listener_alloc_url(
        arg1: *mut *mut nng_stream_listener,
        arg2: *const nng_url,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_listener_free(arg1: *mut nng_stream_listener);
}
unsafe extern "C" {
    pub fn nng_stream_listener_close(arg1: *mut nng_stream_listener);
}
unsafe extern "C" {
    pub fn nng_stream_listener_listen(arg1: *mut nng_stream_listener) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_listener_accept(arg1: *mut nng_stream_listener, arg2: *mut nng_aio);
}
unsafe extern "C" {
    pub fn nng_stream_listener_set(
        arg1: *mut nng_stream_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_void,
        arg4: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_listener_get(
        arg1: *mut nng_stream_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
        arg4: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_listener_get_bool(
        arg1: *mut nng_stream_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_listener_get_int(
        arg1: *mut nng_stream_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_listener_get_ms(
        arg1: *mut nng_stream_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_listener_get_size(
        arg1: *mut nng_stream_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_listener_get_uint64(
        arg1: *mut nng_stream_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_listener_get_string(
        arg1: *mut nng_stream_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_listener_get_ptr(
        arg1: *mut nng_stream_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_listener_get_addr(
        arg1: *mut nng_stream_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_sockaddr,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_listener_set_bool(
        arg1: *mut nng_stream_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_listener_set_int(
        arg1: *mut nng_stream_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_listener_set_ms(
        arg1: *mut nng_stream_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_listener_set_size(
        arg1: *mut nng_stream_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_listener_set_uint64(
        arg1: *mut nng_stream_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_listener_set_string(
        arg1: *mut nng_stream_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_listener_set_ptr(
        arg1: *mut nng_stream_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_stream_listener_set_addr(
        arg1: *mut nng_stream_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *const nng_sockaddr,
    ) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_udp {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn nng_udp_open(udpp: *mut *mut nng_udp, sa: *mut nng_sockaddr) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_udp_close(udp: *mut nng_udp);
}
unsafe extern "C" {
    pub fn nng_udp_sockname(udp: *mut nng_udp, sa: *mut nng_sockaddr) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_udp_send(udp: *mut nng_udp, aio: *mut nng_aio);
}
unsafe extern "C" {
    pub fn nng_udp_recv(udp: *mut nng_udp, aio: *mut nng_aio);
}
unsafe extern "C" {
    pub fn nng_udp_multicast_membership(
        udp: *mut nng_udp,
        sa: *mut nng_sockaddr,
        join: bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_msg_getopt(
        arg1: *mut nng_msg,
        arg2: ::core::ffi::c_int,
        arg3: *mut ::core::ffi::c_void,
        arg4: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_getopt(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
        arg4: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_getopt_bool(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_getopt_int(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_getopt_ms(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_getopt_size(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_getopt_uint64(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_getopt_ptr(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_getopt_string(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_setopt(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_void,
        arg4: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_setopt_bool(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_setopt_int(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_setopt_ms(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_setopt_size(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_setopt_uint64(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_setopt_string(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_setopt_ptr(
        arg1: nng_socket,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_getopt(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
        arg4: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_getopt_bool(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_getopt_int(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_getopt_ms(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_getopt_size(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_setopt(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_void,
        arg4: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_setopt_bool(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_setopt_int(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_setopt_ms(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_setopt_size(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_getopt(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
        arg4: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_getopt_bool(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_getopt_int(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_getopt_ms(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_getopt_size(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_getopt_sockaddr(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_sockaddr,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_getopt_uint64(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_getopt_ptr(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_getopt_string(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_setopt(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_void,
        arg4: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_setopt_bool(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_setopt_int(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_setopt_ms(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_setopt_size(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_setopt_uint64(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_setopt_ptr(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_dialer_setopt_string(
        arg1: nng_dialer,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_getopt(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
        arg4: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_getopt_bool(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_getopt_int(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_getopt_ms(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_getopt_size(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_getopt_sockaddr(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_sockaddr,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_getopt_uint64(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_getopt_ptr(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_getopt_string(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_setopt(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_void,
        arg4: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_setopt_bool(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_setopt_int(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_setopt_ms(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_setopt_size(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_setopt_uint64(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_setopt_ptr(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_setopt_string(
        arg1: nng_listener,
        arg2: *const ::core::ffi::c_char,
        arg3: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pipe_getopt(
        arg1: nng_pipe,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_void,
        arg4: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pipe_getopt_bool(
        arg1: nng_pipe,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut bool,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pipe_getopt_int(
        arg1: nng_pipe,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pipe_getopt_ms(
        arg1: nng_pipe,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_duration,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pipe_getopt_size(
        arg1: nng_pipe,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pipe_getopt_sockaddr(
        arg1: nng_pipe,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_sockaddr,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pipe_getopt_uint64(
        arg1: nng_pipe,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut u64,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pipe_getopt_ptr(
        arg1: nng_pipe,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pipe_getopt_string(
        arg1: nng_pipe,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_closeall();
}
unsafe extern "C" {
    pub fn nng_stream_set_addr(
        arg1: *mut nng_stream,
        arg2: *const ::core::ffi::c_char,
        arg3: *const nng_sockaddr,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_get_addr(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: *mut nng_sockaddr,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ctx_set_addr(
        arg1: nng_ctx,
        arg2: *const ::core::ffi::c_char,
        arg3: *const nng_sockaddr,
    ) -> ::core::ffi::c_int;
}
pub type nng_init_parameter = ::core::ffi::c_int;
unsafe extern "C" {
    pub fn nng_init_set_parameter(arg1: nng_init_parameter, arg2: u64);
}
pub const NNG_INIT_PARAMETER_NONE: _bindgen_ty_1 = _bindgen_ty_1::NNG_INIT_PARAMETER_NONE;
pub const NNG_INIT_NUM_TASK_THREADS: _bindgen_ty_1 = _bindgen_ty_1::NNG_INIT_NUM_TASK_THREADS;
pub const NNG_INIT_NUM_EXPIRE_THREADS: _bindgen_ty_1 = _bindgen_ty_1::NNG_INIT_NUM_EXPIRE_THREADS;
pub const NNG_INIT_NUM_POLLER_THREADS: _bindgen_ty_1 = _bindgen_ty_1::NNG_INIT_NUM_POLLER_THREADS;
pub const NNG_INIT_NUM_RESOLVER_THREADS: _bindgen_ty_1 =
    _bindgen_ty_1::NNG_INIT_NUM_RESOLVER_THREADS;
pub const NNG_INIT_MAX_TASK_THREADS: _bindgen_ty_1 = _bindgen_ty_1::NNG_INIT_MAX_TASK_THREADS;
pub const NNG_INIT_MAX_EXPIRE_THREADS: _bindgen_ty_1 = _bindgen_ty_1::NNG_INIT_MAX_EXPIRE_THREADS;
pub const NNG_INIT_MAX_POLLER_THREADS: _bindgen_ty_1 = _bindgen_ty_1::NNG_INIT_MAX_POLLER_THREADS;
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_1 {
    NNG_INIT_PARAMETER_NONE = 0,
    NNG_INIT_NUM_TASK_THREADS = 1,
    NNG_INIT_NUM_EXPIRE_THREADS = 2,
    NNG_INIT_NUM_POLLER_THREADS = 3,
    NNG_INIT_NUM_RESOLVER_THREADS = 4,
    NNG_INIT_MAX_TASK_THREADS = 5,
    NNG_INIT_MAX_EXPIRE_THREADS = 6,
    NNG_INIT_MAX_POLLER_THREADS = 7,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum nng_log_level {
    NNG_LOG_NONE = 0,
    NNG_LOG_ERR = 3,
    NNG_LOG_WARN = 4,
    NNG_LOG_NOTICE = 5,
    NNG_LOG_INFO = 6,
    NNG_LOG_DEBUG = 7,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum nng_log_facility {
    NNG_LOG_USER = 1,
    NNG_LOG_DAEMON = 3,
    NNG_LOG_AUTH = 10,
    NNG_LOG_LOCAL0 = 16,
    NNG_LOG_LOCAL1 = 17,
    NNG_LOG_LOCAL2 = 18,
    NNG_LOG_LOCAL3 = 19,
    NNG_LOG_LOCAL4 = 20,
    NNG_LOG_LOCAL5 = 21,
    NNG_LOG_LOCAL6 = 22,
    NNG_LOG_LOCAL7 = 23,
}
pub type nng_logger = ::core::option::Option<
    unsafe extern "C" fn(
        level: nng_log_level,
        facility: nng_log_facility,
        msgid: *const ::core::ffi::c_char,
        msg: *const ::core::ffi::c_char,
    ),
>;
unsafe extern "C" {
    pub fn nng_null_logger(
        arg1: nng_log_level,
        arg2: nng_log_facility,
        arg3: *const ::core::ffi::c_char,
        arg4: *const ::core::ffi::c_char,
    );
}
unsafe extern "C" {
    pub fn nng_stderr_logger(
        arg1: nng_log_level,
        arg2: nng_log_facility,
        arg3: *const ::core::ffi::c_char,
        arg4: *const ::core::ffi::c_char,
    );
}
unsafe extern "C" {
    pub fn nng_system_logger(
        arg1: nng_log_level,
        arg2: nng_log_facility,
        arg3: *const ::core::ffi::c_char,
        arg4: *const ::core::ffi::c_char,
    );
}
unsafe extern "C" {
    pub fn nng_log_set_facility(facility: nng_log_facility);
}
unsafe extern "C" {
    pub fn nng_log_set_level(level: nng_log_level);
}
unsafe extern "C" {
    pub fn nng_log_get_level() -> nng_log_level;
}
unsafe extern "C" {
    pub fn nng_log_set_logger(logger: nng_logger);
}
unsafe extern "C" {
    pub fn nng_log_err(msgid: *const ::core::ffi::c_char, msg: *const ::core::ffi::c_char, ...);
}
unsafe extern "C" {
    pub fn nng_log_warn(msgid: *const ::core::ffi::c_char, msg: *const ::core::ffi::c_char, ...);
}
unsafe extern "C" {
    pub fn nng_log_notice(msgid: *const ::core::ffi::c_char, msg: *const ::core::ffi::c_char, ...);
}
unsafe extern "C" {
    pub fn nng_log_info(msgid: *const ::core::ffi::c_char, msg: *const ::core::ffi::c_char, ...);
}
unsafe extern "C" {
    pub fn nng_log_debug(msgid: *const ::core::ffi::c_char, msg: *const ::core::ffi::c_char, ...);
}
unsafe extern "C" {
    pub fn nng_log_auth(
        level: nng_log_level,
        msgid: *const ::core::ffi::c_char,
        msg: *const ::core::ffi::c_char,
        ...
    );
}
unsafe extern "C" {
    pub fn nng_clock() -> nng_time;
}
unsafe extern "C" {
    pub fn nng_msleep(arg1: nng_duration);
}
unsafe extern "C" {
    pub fn nng_random() -> u32;
}
unsafe extern "C" {
    pub fn nng_socket_pair(arg1: *mut ::core::ffi::c_int) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_thread {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn nng_thread_create(
        arg1: *mut *mut nng_thread,
        arg2: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
        arg3: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_thread_set_name(arg1: *mut nng_thread, arg2: *const ::core::ffi::c_char);
}
unsafe extern "C" {
    pub fn nng_thread_destroy(arg1: *mut nng_thread);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_mtx {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn nng_mtx_alloc(arg1: *mut *mut nng_mtx) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_mtx_free(arg1: *mut nng_mtx);
}
unsafe extern "C" {
    pub fn nng_mtx_lock(arg1: *mut nng_mtx);
}
unsafe extern "C" {
    pub fn nng_mtx_unlock(arg1: *mut nng_mtx);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_cv {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn nng_cv_alloc(arg1: *mut *mut nng_cv, arg2: *mut nng_mtx) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_cv_free(arg1: *mut nng_cv);
}
unsafe extern "C" {
    pub fn nng_cv_wait(arg1: *mut nng_cv);
}
unsafe extern "C" {
    pub fn nng_cv_until(arg1: *mut nng_cv, arg2: nng_time) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_cv_wake(arg1: *mut nng_cv);
}
unsafe extern "C" {
    pub fn nng_cv_wake1(arg1: *mut nng_cv);
}
unsafe extern "C" {
    pub fn nng_dialer_get_url(arg1: nng_dialer, arg2: *mut *const nng_url) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_listener_get_url(
        arg1: nng_listener,
        arg2: *mut *const nng_url,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_bus0_open(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_bus0_open_raw(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pair0_open(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pair0_open_raw(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pair1_open(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pair1_open_raw(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pair1_open_poly(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pull0_open(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pull0_open_raw(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_push0_open(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_push0_open_raw(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pub0_open(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_pub0_open_raw(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_sub0_open(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_sub0_open_raw(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_sub0_socket_subscribe(
        id: nng_socket,
        buf: *const ::core::ffi::c_void,
        sz: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_sub0_socket_unsubscribe(
        id: nng_socket,
        buf: *const ::core::ffi::c_void,
        sz: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_sub0_ctx_subscribe(
        id: nng_ctx,
        buf: *const ::core::ffi::c_void,
        sz: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_sub0_ctx_unsubscribe(
        id: nng_ctx,
        buf: *const ::core::ffi::c_void,
        sz: usize,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_rep0_open(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_rep0_open_raw(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_req0_open(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_req0_open_raw(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_respondent0_open(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_respondent0_open_raw(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_surveyor0_open(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_surveyor0_open_raw(arg1: *mut nng_socket) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_inproc_register() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ipc_register() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_tcp_register() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_tls_register() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_ws_register() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nng_wss_register() -> ::core::ffi::c_int;
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum nng_zt_status {
    NNG_ZT_STATUS_UP = 0,
    NNG_ZT_STATUS_CONFIG = 1,
    NNG_ZT_STATUS_DENIED = 2,
    NNG_ZT_STATUS_NOTFOUND = 3,
    NNG_ZT_STATUS_ERROR = 4,
    NNG_ZT_STATUS_OBSOLETE = 5,
    NNG_ZT_STATUS_UNKNOWN = 6,
}
unsafe extern "C" {
    pub fn nng_zt_register() -> ::core::ffi::c_int;
}
