permissions:
  contents: read
on:
  push:
    branches: [ main ]
  pull_request:
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
name: build
jobs:
  linux-sys:
    name: nng-sys on linux / ${{ matrix.name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: system + bindgen
            features: build-bindgen
            # system nng, clang-dev for bindgen
            apt: libnng1 libnng-dev libclang-dev
            env: {}
          - name: vendored + bindgen
            features: build-nng,build-bindgen
            # vendored nng and clang-dev for bindgen
            apt: clang cmake libclang-dev
            env: {}
          - name: vendored + bundled
            features: build-nng
            # vendored nng with bundled bindings, default generator (Unix Makefiles)
            apt: clang cmake
            env: {}
          - name: vendored with Ninja + bundled
            features: build-nng
            # vendored nng with bundled bindings, ninja generator
            apt: clang cmake ninja-build
            env:
              CMAKE_GENERATOR: Ninja
          - name: vendored with stats + bundled
            features: nng-stats
            # vendored nng to get stats, bundled bindings.
            apt: clang cmake
            env: {}
          - name: vendored with tls + bundled
            features: nng-tls
            # vendored nng to guarantee we get tls, bundled bindings, need to
            # link against mbedtls.
            apt: clang cmake libmbedtls-dev
            env: {}
          - name: vendored with compat (bindgen implied)
            features: nng-compat
            # to generate compat, we need to run bindgen since bundled do not
            # include compat. use system nng though.
            apt: libnng1 libnng-dev libclang-dev
            env: {}
          - name: vendored with supplemental (bindgen implied)
            features: nng-supplemental
            # ditto for supplemental
            apt: libnng1 libnng-dev libclang-dev
            env: {}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # tag=v5.0.0
        with:
          submodules: true
      - name: Install dependencies
        run: |
          sudo apt-get install -y ${{ matrix.apt }}
      - name: Install stable
        uses: dtolnay/rust-toolchain@6d653acede28d24f02e3cd41383119e8b1b35921 # branch=master
        with:
          toolchain: stable
      - name: cargo test -p nng-sys --no-default-features --features ${{ matrix.features }}
        run: cargo test -p nng-sys --locked --all-targets --no-default-features --features ${{ matrix.features }}
        env: ${{ matrix.env }}
  linux-nng:
    name: nng on linux without build-nng or build-bindgen
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # tag=v5.0.0
        with:
          submodules: true
      - name: Install dependencies
        run: |
          sudo apt-get install -y libnng1 libnng-dev
      - name: Install stable
        uses: dtolnay/rust-toolchain@6d653acede28d24f02e3cd41383119e8b1b35921 # branch=master
        with:
          toolchain: stable
      - name: cargo test -p nng --no-default-features
        run: cargo test -p nng --locked --all-targets --no-default-features
  macos-sys:
    name: nng-sys on macOS ${{ matrix.features }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - features:
            brew: nng
          - features: --features build-nng
            brew: cmake
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # tag=v5.0.0
        with:
          submodules: true
      - name: Install dependencies
        run: |
          brew install ${{ matrix.brew }}
      - name: Install stable
        uses: dtolnay/rust-toolchain@6d653acede28d24f02e3cd41383119e8b1b35921 # branch=master
        with:
          toolchain: stable
      - name: cargo test -p nng-sys --no-default-features ${{ matrix.features }}
        run: |
          env \
            CFLAGS="-I$(brew --prefix)/include${CFLAGS+ ${CFLAGS}}" \
            RUSTFLAGS="-L native=$(brew --prefix)/lib" \
            cargo test -p nng-sys --locked --all-targets --no-default-features ${{ matrix.features }}
  win-sys:
    name: nng-sys on Windows ${{ matrix.features }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # chocolatey does not have nng as a pre-built library
          # - os: windows-latest
          #   features:
          #   choco: libnng-dev
          - os: windows-2022
            features: --features build-nng
            choco: llvm cmake
          # chocolatey cmake (4.1.2) doesn't have VS2026 yet (landed in 4.2)
          # - os: windows-2025
          #   features: --features build-nng
          #   choco: llvm cmake
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # tag=v5.0.0
        with:
          submodules: true
      - name: Install dependencies
        # echo "C:\Program Files\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        run: |
          choco install ${{ matrix.choco }}
      - name: Install stable
        uses: dtolnay/rust-toolchain@6d653acede28d24f02e3cd41383119e8b1b35921 # branch=master
        with:
          toolchain: stable
      - name: cargo test -p nng-sys --no-default-features ${{ matrix.features }}
        run: cargo test -p nng-sys --locked --all-targets --no-default-features ${{ matrix.features }}
